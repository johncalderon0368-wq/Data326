<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üé§ Fix Your Voice Agent NOW</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
</head>
<body class="bg-gradient-to-br from-red-50 to-blue-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
            <!-- Urgent Header -->
            <div class="text-center mb-8">
                <h1 class="text-4xl font-bold text-red-600 mb-2">
                    üö® VOICE AGENT FIX NEEDED
                </h1>
                <p class="text-lg text-gray-700 mb-4">Your website is live but can't hear you because the brain server isn't deployed!</p>
                <div class="bg-yellow-100 border border-yellow-400 rounded-lg p-4">
                    <p class="text-yellow-800"><strong>Website URL:</strong> https://aiworkflowadvisors.com/</p>
                    <p class="text-yellow-800"><strong>Status:</strong> ‚úÖ Website working, ‚ùå Voice not working</p>
                </div>
            </div>

            <!-- The Problem -->
            <div class="bg-red-50 border border-red-200 rounded-xl p-6 mb-6">
                <h2 class="text-xl font-bold text-red-800 mb-4">
                    <i class="fas fa-exclamation-triangle mr-2"></i>
                    What's Wrong
                </h2>
                <div class="text-red-700 space-y-2">
                    <p><strong>Issue:</strong> Your voice button tries to call <code>/api/proxy</code> endpoints</p>
                    <p><strong>Problem:</strong> Those endpoints need a backend server to work</p>
                    <p><strong>Current Status:</strong> No backend server = voice functionality fails</p>
                </div>
            </div>

            <!-- The Solution -->
            <div class="bg-green-50 border border-green-200 rounded-xl p-6 mb-6">
                <h2 class="text-xl font-bold text-green-800 mb-4">
                    <i class="fas fa-check-circle mr-2"></i>
                    The Solution (2 Minutes)
                </h2>
                <div class="space-y-4">
                    <div class="flex items-start space-x-4">
                        <div class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full font-bold text-sm">1</div>
                        <div>
                            <h3 class="font-bold text-gray-900">Deploy Your Brain Server</h3>
                            <button id="downloadBrainServer" class="mt-2 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg">
                                <i class="fas fa-download mr-2"></i>Download Brain Server Package
                            </button>
                            <p class="text-sm text-gray-600 mt-1">Get the server files that will make your voice agent work</p>
                        </div>
                    </div>
                    
                    <div class="flex items-start space-x-4">
                        <div class="bg-green-100 text-green-800 px-3 py-1 rounded-full font-bold text-sm">2</div>
                        <div>
                            <h3 class="font-bold text-gray-900">Deploy to Render.com</h3>
                            <p class="text-gray-600">Go to <a href="https://render.com" target="_blank" class="text-blue-600 underline">render.com</a> ‚Üí "New Web Service" ‚Üí Upload files ‚Üí Deploy</p>
                        </div>
                    </div>
                    
                    <div class="flex items-start space-x-4">
                        <div class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full font-bold text-sm">3</div>
                        <div>
                            <h3 class="font-bold text-gray-900">Update Your Website</h3>
                            <p class="text-gray-600">I'll give you the exact code to fix your website configuration</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Alternative: Quick Test -->
            <div class="bg-blue-50 border border-blue-200 rounded-xl p-6 mb-6">
                <h2 class="text-xl font-bold text-blue-800 mb-4">
                    <i class="fas fa-flash mr-2"></i>
                    Alternative: Quick Test Version
                </h2>
                <p class="text-blue-700 mb-4">Want to test your voice agent immediately? I can create a version that works without a backend server:</p>
                <button id="createTestVersion" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                    <i class="fas fa-rocket mr-2"></i>Create Test Version
                </button>
            </div>

            <!-- Download Status -->
            <div id="downloadStatus" class="hidden bg-green-50 border border-green-200 rounded-xl p-6 text-center mb-6">
                <h4 class="font-bold text-green-900 text-lg mb-2">‚úÖ Brain Server Package Ready!</h4>
                <p class="text-green-800 mb-4">Now deploy this to <a href="https://render.com" target="_blank" class="text-blue-600 underline font-bold">render.com</a></p>
                <div class="bg-white rounded-lg p-4 border border-green-200 text-left">
                    <h5 class="font-bold text-green-900 mb-2">üìã Next Steps:</h5>
                    <ol class="text-green-800 space-y-1 text-sm">
                        <li><strong>1.</strong> Go to render.com and sign up (free)</li>
                        <li><strong>2.</strong> Click "New" ‚Üí "Web Service"</li>
                        <li><strong>3.</strong> Upload your downloaded files</li>
                        <li><strong>4.</strong> Click "Deploy" (takes 1-2 minutes)</li>
                        <li><strong>5.</strong> Copy your server URL (something like: https://your-app.render.com)</li>
                        <li><strong>6.</strong> Come back here with the URL!</li>
                    </ol>
                </div>
            </div>

            <!-- Configuration Update Tool -->
            <div id="configTool" class="hidden bg-purple-50 border border-purple-200 rounded-xl p-6">
                <h2 class="text-xl font-bold text-purple-800 mb-4">
                    <i class="fas fa-cog mr-2"></i>
                    Step 3: Update Website Configuration
                </h2>
                <p class="text-purple-700 mb-4">After deploying to Render, enter your server URL here:</p>
                <div class="flex space-x-4 mb-4">
                    <input type="url" id="serverUrl" placeholder="https://your-app.render.com" class="flex-1 px-4 py-2 border border-purple-300 rounded-lg">
                    <button id="generateConfig" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg">
                        Generate Fix
                    </button>
                </div>
                <div id="configOutput" class="hidden bg-white border border-purple-200 rounded-lg p-4">
                    <h4 class="font-bold text-purple-900 mb-2">üìÑ Updated Configuration File</h4>
                    <p class="text-purple-800 mb-2 text-sm">Upload this file to your Netlify site to fix the voice functionality:</p>
                    <button id="downloadConfig" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg">
                        <i class="fas fa-download mr-2"></i>Download Fixed Config
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('downloadBrainServer').addEventListener('click', createBrainServerPackage);
        document.getElementById('createTestVersion').addEventListener('click', createTestVersion);
        document.getElementById('generateConfig').addEventListener('click', generateConfiguration);

        let serverUrl = '';

        async function createBrainServerPackage() {
            const button = document.getElementById('downloadBrainServer');
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating brain server...';

            try {
                const zip = new JSZip();

                // Package.json optimized for Render
                const packageJson = {
                    "name": "voice-agent-brain",
                    "version": "1.0.0",
                    "description": "AI Voice Agent Brain Server for aiworkflowadvisors.com",
                    "main": "server.js",
                    "scripts": {
                        "start": "node server.js",
                        "dev": "node server.js"
                    },
                    "engines": {
                        "node": "18.x"
                    },
                    "dependencies": {
                        "express": "^4.18.0",
                        "cors": "^2.8.5",
                        "helmet": "^7.0.0",
                        "compression": "^1.7.4"
                    }
                };

                // Brain server optimized for your website
                const serverCode = \`const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');

const app = express();
const PORT = process.env.PORT || 3000;

// Security & Performance
app.use(helmet());
app.use(compression());

// CORS specifically for aiworkflowadvisors.com
app.use(cors({
    origin: [
        'https://aiworkflowadvisors.com',
        'https://*.aiworkflowadvisors.com',
        'https://*.netlify.app'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'OPTIONS']
}));

app.use(express.json({ limit: '10mb' }));

// Root endpoint
app.get('/', (req, res) => {
    res.json({
        status: 'üé§ Voice Agent Brain Server Running',
        website: 'aiworkflowadvisors.com',
        version: '1.0.0',
        timestamp: new Date().toISOString(),
        endpoints: {
            chat: '/api/proxy/chat',
            voice: '/api/proxy/voice',
            health: '/health'
        }
    });
});

// Health check
app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy',
        uptime: Math.floor(process.uptime()),
        timestamp: new Date().toISOString()
    });
});

// Proxy endpoints (matching your website's expectations)
app.post('/api/proxy/chat', (req, res) => {
    try {
        const { message, userId } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Message required' });
        }

        // Enhanced AI responses
        let response;
        const msg = message.toLowerCase();
        
        if (msg.includes('n8n') || msg.includes('workflow')) {
            response = \\\`I can help you with n8n workflows! You mentioned: "\${message}". I can analyze workflow security, optimize efficiency, and suggest improvements. What specific aspect would you like to explore?\\\`;
        } else if (msg.includes('hello') || msg.includes('hi')) {
            response = \\\`Hello! I'm your AI workflow advisor. You said: "\${message}". I'm here to help you optimize your n8n workflows and improve automation processes!\\\`;
        } else if (msg.includes('help')) {
            response = \\\`I'm here to help! You asked: "\${message}". I can assist with workflow analysis, security audits, performance optimization, and n8n best practices.\\\`;
        } else {
            const responses = [
                \\\`Interesting point about: "\${message}". In workflow automation, this relates to optimizing data flow and reducing bottlenecks.\\\`,
                \\\`Thank you for sharing: "\${message}". Let me analyze this from a workflow efficiency perspective.\\\`,
                \\\`You mentioned: "\${message}". This is important for workflow design - would you like me to elaborate on optimization strategies?\\\`
            ];
            response = responses[Math.floor(Math.random() * responses.length)];
        }
        
        res.json({
            response: response,
            timestamp: new Date().toISOString(),
            userId: userId || 'anonymous',
            status: 'success'
        });
        
    } catch (error) {
        console.error('Chat error:', error);
        res.status(500).json({ error: 'Chat processing failed' });
    }
});

// Voice processing endpoint
app.post('/api/proxy/voice', (req, res) => {
    try {
        const { text, voiceId } = req.body;
        
        const processedText = text || 'Hello! I am your AI workflow advisor, ready to help optimize your n8n automations!';
        
        res.json({
            message: 'Voice processing complete',
            text: processedText,
            voiceId: voiceId || 'default',
            audioUrl: null, // Would contain TTS audio in production
            timestamp: new Date().toISOString(),
            status: 'success'
        });
        
    } catch (error) {
        res.status(500).json({ error: 'Voice processing failed' });
    }
});

// Authentication endpoint (required by your website)
app.post('/api/auth/configure', (req, res) => {
    res.json({
        message: 'Configuration received',
        sessionToken: 'demo-session-' + Date.now(),
        csrfToken: 'csrf-' + Date.now(),
        expires: Date.now() + 3600000,
        status: 'success'
    });
});

// Error handling
app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({ error: 'Server error' });
});

// Start server
app.listen(PORT, '0.0.0.0', () => {
    console.log(\\\`\\\\nüé§ Voice Agent Brain Server Started!\\\`);
    console.log(\\\`üåê Server URL: http://localhost:\${PORT}\\\`);
    console.log(\\\`üì± Ready for: aiworkflowadvisors.com\\\`);
    console.log(\\\`üïí Started: \${new Date().toISOString()}\\\`);
    console.log(\\\`\\\\nüöÄ Your voice agent is ready to work!\\\\n\\\`);
});
\`;

                // Configuration files
                const renderYaml = \`services:
  - type: web
    name: voice-agent-brain
    env: node
    buildCommand: npm install
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: production\`;

                zip.file('package.json', JSON.stringify(packageJson, null, 2));
                zip.file('server.js', serverCode);
                zip.file('render.yaml', renderYaml);

                // Download
                const content = await zip.generateAsync({type: 'blob'});
                const url = URL.createObjectURL(content);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'voice-agent-brain-server.zip';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                // Show success
                document.getElementById('downloadStatus').classList.remove('hidden');
                document.getElementById('configTool').classList.remove('hidden');
                button.innerHTML = '<i class="fas fa-check mr-2"></i>Downloaded!';
                button.classList.add('bg-green-600');

            } catch (error) {
                console.error('Error:', error);
                button.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Error - Try Again';
            }

            button.disabled = false;
        }

        async function createTestVersion() {
            alert('Creating a test version that works immediately without backend deployment...');
            
            // This would create a version with mock responses for immediate testing
            const zip = new JSZip();
            
            const testHTML = \`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Agent Test Version</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 min-h-screen flex items-center justify-center">
    <div class="max-w-md mx-auto bg-white rounded-xl shadow-lg p-8 text-center">
        <h1 class="text-2xl font-bold text-blue-600 mb-4">üé§ Voice Agent Test</h1>
        <button id="testMic" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-8 rounded-full">
            <i class="fas fa-microphone mr-2"></i>Test Voice
        </button>
        <p id="status" class="mt-4 text-gray-600"></p>
        <div id="response" class="mt-4 p-4 bg-gray-100 rounded-lg hidden"></div>
    </div>

    <script>
        document.getElementById('testMic').addEventListener('click', function() {
            const status = document.getElementById('status');
            const response = document.getElementById('response');
            
            status.textContent = 'Listening...';
            
            if ('webkitSpeechRecognition' in window) {
                const recognition = new webkitSpeechRecognition();
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'en-US';

                recognition.onresult = function(event) {
                    const transcript = event.results[0][0].transcript;
                    status.textContent = 'You said: "' + transcript + '"';
                    
                    // Mock AI response
                    const aiResponse = 'I heard you say: "' + transcript + '". This is a test version. Deploy the brain server for full functionality!';
                    response.textContent = aiResponse;
                    response.classList.remove('hidden');
                    
                    // Text to speech
                    if ('speechSynthesis' in window) {
                        const utterance = new SpeechSynthesisUtterance(aiResponse);
                        speechSynthesis.speak(utterance);
                    }
                };

                recognition.onerror = function(event) {
                    status.textContent = 'Error: ' + event.error;
                };

                recognition.start();
            } else {
                status.textContent = 'Speech recognition not supported in this browser.';
            }
        });
    </script>
</body>
</html>\`;

            zip.file('test-voice-agent.html', testHTML);
            
            const content = await zip.generateAsync({type: 'blob'});
            const url = URL.createObjectURL(content);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'voice-agent-test.zip';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function generateConfiguration() {
            serverUrl = document.getElementById('serverUrl').value.trim();
            
            if (!serverUrl) {
                alert('Please enter your Render server URL first!');
                return;
            }
            
            if (!serverUrl.startsWith('http')) {
                serverUrl = 'https://' + serverUrl;
            }
            
            document.getElementById('configOutput').classList.remove('hidden');
            document.getElementById('downloadConfig').onclick = downloadUpdatedConfig;
        }

        function downloadUpdatedConfig() {
            const configJS = \`// Updated API configuration for aiworkflowadvisors.com
// Replace the proxyBaseUrl in your secure-api-client.js

class SecureAPIClient {
    constructor() {
        this.sessionToken = null;
        this.csrfToken = null;
        // UPDATED: Point to your deployed brain server
        this.proxyBaseUrl = '\${serverUrl}/api/proxy';
        this.rateLimiter = new RateLimit();
        
        this.initializeSession();
    }
    
    // ... rest of the code remains the same
}

// Instructions:
// 1. Upload this file to your Netlify site
// 2. Update the secure-api-client.js file with the new proxyBaseUrl
// 3. Your voice agent will now work!
\`;

            const blob = new Blob([configJS], { type: 'text/javascript' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'updated-secure-api-client.js';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            alert('Configuration downloaded! Upload this to your Netlify site to fix the voice functionality.');
        }
    </script>
</body>
</html>
